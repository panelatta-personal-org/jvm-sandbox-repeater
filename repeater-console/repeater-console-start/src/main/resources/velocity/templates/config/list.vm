<!DOCTYPE html>
<html>
<head>
    #set($pageTitle = $i18n.get("title.config.management"))
    #parse("blocks/html-head.vm")
</head>
<body class="hold-transition sidebar-mini">
<!-- Site wrapper -->
<div class="wrapper">
    #parse("blocks/navbar.vm")

    #set($currentPage = "config")
    #parse("blocks/sidebar.vm")

    <!-- Content Wrapper. Contains page content -->
    <div class="content-wrapper">
        <!-- Content Header (Page header) -->
        <section class="content-header">
            <div class="container-fluid">
                <div class="row mb-2">
                    <div class="col-sm-6">
                        <h1>$i18n.get("title.config.management")</h1>
                    </div>
                    <div class="col-sm-6">
                        <ol class="breadcrumb float-sm-right">
                            <li class="breadcrumb-item"><a href="#">$i18n.get("page.home")</a></li>
                            <li class="breadcrumb-item active">$i18n.get("title.config.management")</li>
                        </ol>
                    </div>
                </div>
            </div><!-- /.container-fluid -->
        </section>

        <!-- Main content -->
        <section class="content">
            <!-- Config推送调试面板 -->
            <div class="row">
                <div class="col-12">
                    <div id="config-debug-panel" class="card card-warning collapsed-card" style="display:none;">
                        <div class="card-header">
                            <h3 class="card-title">
                                <i class="fa fa-bug"></i> Config推送调试面板
                            </h3>
                            <div class="card-tools">
                                <button type="button" class="btn btn-warning btn-sm" data-card-widget="collapse">
                                    <i class="fa fa-plus"></i>
                                </button>
                                <button type="button" class="btn btn-warning btn-sm" onclick="clearDebugLog()">
                                    <i class="fa fa-trash"></i> 清空
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <h5>📋 推送参数</h5>
                                    <div id="push-params-display" class="debug-content">
                                        <p class="text-muted">点击推送按钮时显示参数</p>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <h5>📋 模块匹配结果</h5>
                                    <div id="module-match-display" class="debug-content">
                                        <p class="text-muted">显示匹配的模块列表</p>
                                    </div>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <div class="col-md-12">
                                    <h5>📝 调试日志</h5>
                                    <div id="debug-log-display" class="debug-log">
                                        <!-- 实时调试日志 -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-12">
                    <div class="card card-blue card-outline">
                        <div class="card-header border-0">
                            <h5 class="card-title text-blue">
                                $i18n.get("title.config.management") <i class="fa fa-cogs"></i>
                            </h5>
                            <div class="card-tools">
                            <div class="btn-group float-right" role="group" style="margin-right: 10px;">
                                <button type="button" class="btn btn-info btn-sm" onclick="openEnvironmentChecker()">
                                    <i class="fa fa-check-circle"></i> Environment检查器
                                </button>
                                <button type="button" class="btn btn-warning btn-sm" onclick="toggleConfigDebugPanel()">
                                    <i class="fa fa-bug"></i> 调试面板
                                </button>
                                <button type="button" class="btn btn-secondary btn-sm" onclick="openDatabaseDebugger()">
                                    <i class="fa fa-database"></i> 数据库调试
                                </button>
                            </div>
                                <a href="/config/add.htm" target="_blank" class="btn btn-primary btn-sm float-right"
                                        data-loading-text="searching">
                                    $i18n.get("button.add.config")
                                </a>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-lg-12">
                                    <form class="form-inline" method="get" action="list.htm">
                                        <div class="form-group" style="margin-left:10px">
                                            <label for="appName">$i18n.get("label.app.name"):</label>
                                            <input type="text" class="form-control" placeholder="$i18n.get('label.app.name')" 
                                                   name="appName" value="$!requestParams.appName" autocomplete="off"
                                                   data-toggle="tooltip" title="$i18n.get('label.app.name')" 
                                                   style="width: 210px;margin-left:10px">
                                        </div>
                                        <div class="form-group" style="margin-left: 10px">
                                            <label for="environment">$i18n.get("label.environment"):</label>
                                            <input type="text" class="form-control" placeholder="$i18n.get('label.environment')" 
                                                   name="environment" value="$!requestParams.environment" autocomplete="off"
                                                   data-toggle="tooltip" title="$i18n.get('label.environment')" 
                                                   style="width: 210px;margin-left:10px">
                                        </div>
                                        <div class="form-group" style="margin-left: 20px">
                                            <button type="submit" class="btn btn-primary"
                                                    data-loading-text="searching" id="search-online-btn">
                                                $i18n.get("button.query") <i class="fa fa-search icon-on-right bigger"></i>
                                            </button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                            <table class="table table-hover table-striped" style="word-break: break-all;">
                                #if($pagerWrapper.content && $pagerWrapper.content.size() > 0)
                                    <thead>
                                    <tr>
                                        <th>$i18n.get("table.app.name")</th>
                                        <th>$i18n.get("table.environment")</th>
                                        <th>$i18n.get("form.config.model")</th>
                                        <th>$i18n.get("table.create.time")</th>
                                        <th>$i18n.get("table.modify.time")</th>
                                        <th width="150px">$i18n.get("table.operation")</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                        #foreach($data in $pagerWrapper.content)
                                        <tr>
                                            <td style="vertical-align: middle">$!data.appName</td>
                                            <td style="vertical-align: middle">$!{data.environment}</td>
                                            <td style="vertical-align: middle">$!data.configModel</td>
                                            <td style="vertical-align: middle">$!{data.gmtCreate}</td>
                                            <td style="vertical-align: middle">$!{data.gmtModified}</td>
                                            <td style="vertical-align: middle">
                                                <a href="/config/detail.htm?appName=$!{data.appName}&environment=$!{data.environment}" 
                                                   class="btn btn-primary btn-xs" data-toggle="tooltip"
                                                   title="$i18n.get('button.detail')" data-env="$!{data.environment}"
                                                   data-app="$!{data.appName}">$i18n.get("button.detail")
                                                </a>
                                                <a href="/config/edit.htm?appName=$!{data.appName}&environment=$!{data.environment}" 
                                                   class="btn btn-info btn-xs" data-toggle="tooltip"
                                                   title="$i18n.get('button.edit')" data-env="$!{data.environment}"
                                                   data-app="$!{data.appName}">$i18n.get("button.edit")
                                                </a>
                                                <button class="btn btn-success btn-xs btn-push" data-toggle="tooltip"
                                                        title="$i18n.get('button.push')" data-env="$!{data.environment}"
                                                        data-app="$!{data.appName}">$i18n.get("button.push")
                                                </button>
                                                <button class="btn btn-danger btn-xs btn-config-delete" data-toggle="tooltip"
                                                        title="$i18n.get('button.delete')" data-env="$!{data.environment}"
                                                        data-app="$!{data.appName}">$i18n.get("button.delete")
                                                </button>
                                            </td>
                                        </tr>
                                        #end
                                    </tbody>
                                #else
                                    <h5 style="padding-left: 10px;margin-top: 20px">$i18n.get("msg.no.config")</h5>
                                #end
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        <!-- /.content -->
    </div>
    <!-- /.content-wrapper -->

    #parse("blocks/footer.vm")
</div>
<!-- ./wrapper -->

#parse("blocks/header-scripts.vm")
#parse("blocks/fakeloader.vm")

<script type="application/javascript">
    // 避免与Velocity的$符号冲突
    var jq = jQuery.noConflict();
    
    // ==================== 全局函数定义 (供HTML onclick调用) ====================
    
    window.toggleConfigDebugPanel = function() {
            var panel = jq('#config-debug-panel');
            if (panel.is(':visible')) {
                panel.hide();
            } else {
                panel.show();
                if (panel.hasClass('collapsed-card')) {
                    panel.find('[data-card-widget="collapse"]').click();
                }
            }
        };
        
        function showConfigDebugPanel() {
            jq('#config-debug-panel').show();
            if (jq('#config-debug-panel').hasClass('collapsed-card')) {
                jq('#config-debug-panel').find('[data-card-widget="collapse"]').click();
            }
        }
        
        function logPushParams(appName, environment) {
            var params = {
                appName: appName,
                environment: environment,
                timestamp: new Date().toLocaleString()
            };
            
            var html = '<div class="param-item">' +
                '<strong>应用名:</strong> <span class="text-primary">' + appName + '</span><br>' +
                '<strong>环境:</strong> <span class="text-info">' + environment + '</span><br>' +
                '<strong>时间:</strong> <span class="text-muted">' + params.timestamp + '</span>' +
                '</div>';
            
            jq('#push-params-display').html(html);
            addDebugLog('[PUSH]', '开始推送Config - AppName: ' + appName + ', Environment: ' + environment);
        }
        
        function checkModuleMatches(appName, environment, callback) {
            addDebugLog('[QUERY]', '正在查询匹配的模块...');
            
            jq.ajax({
                url: '/config/checkMatches.json',
                method: 'GET',
                data: { appName: appName, environment: environment },
                success: function(response) {
                    if (response.success) {
                        callback(response.data);
                    } else {
                        callback({
                            hasMatches: false,
                            reason: 'api_error',
                            suggestions: [response.message],
                            matchCount: 0,
                            availableEnvironments: []
                        });
                    }
                },
                error: function() {
                    callback({
                        hasMatches: false,
                        reason: 'network_error',
                        suggestions: ['检查网络连接', '重试操作'],
                        matchCount: 0,
                        availableEnvironments: []
                    });
                }
            });
        }
        
        function logModuleMatches(matchResult) {
            var html = '';
            if (matchResult.hasMatches) {
                html = '<div class="alert alert-success">' +
                    '<strong>[OK] 找到 ' + matchResult.matchCount + ' 个匹配的模块</strong>' +
                    '</div>' +
                    '<div class="mt-2">' +
                    '<small class="text-muted">匹配的模块将接收Config推送</small>' +
                    '</div>';
                addDebugLog('[OK]', '找到 ' + matchResult.matchCount + ' 个匹配的模块');
            } else {
                var envBadges = '';
                for (var i = 0; i < matchResult.availableEnvironments.length; i++) {
                    envBadges += '<span class="badge badge-secondary mr-1">' + matchResult.availableEnvironments[i] + '</span>';
                }
                
                html = '<div class="alert alert-danger">' +
                    '<strong>[ERROR] 没有找到匹配的模块</strong>' +
                    '</div>' +
                    '<div class="mt-2">' +
                    '<strong>原因:</strong> <span class="text-danger">' + getReasonText(matchResult.reason) + '</span><br>' +
                    '<strong>可用的Environments:</strong><br>' +
                    envBadges +
                    '</div>';
                addDebugLog('[ERROR]', '没有找到匹配的模块 - ' + getReasonText(matchResult.reason));
            }
            
            jq('#module-match-display').html(html);
        }
        
        function getReasonText(reason) {
            switch(reason) {
                case 'no_modules': return '该应用没有注册任何模块';
                case 'environment_mismatch': return 'Environment不匹配';
                case 'api_error': return 'API调用错误';
                case 'network_error': return '网络连接错误';
                default: return '未知原因';
            }
        }
        
        function executePushConfig(appName, environment) {
            addDebugLog('[START]', '开始执行Config推送...');
            showLoading(10);
            
            jq.ajax({
                type: 'POST',
                url: "//" + host + "/config/push.json",
                data: {
                    "appName": appName,
                    "environment": environment,
                },
                success: function (res) {
                    hideLoading(10);
                    if (res.success) {
                        addDebugLog('[SUCCESS]', 'Config推送成功: ' + res.message);
                    } else {
                        addDebugLog('[FAIL]', 'Config推送失败: ' + res.message);
                    }
                    notice(res.message, res.success);
                },
                dataType: 'json',
                error: function (XMLHttpRequest) {
                    hideLoading(10);
                    addDebugLog('[EXCEPTION]', 'Config推送异常: ' + XMLHttpRequest.responseText);
                    notice(JSON.stringify(XMLHttpRequest), false);
                }
            });
        }
        
        function showNoMatchReason(reason, suggestions) {
            var suggestionHtml = '';
            for (var i = 0; i < suggestions.length; i++) {
                suggestionHtml += '<li>' + suggestions[i] + '</li>';
            }
            
            var alertHtml = '<div class="alert alert-warning">' +
                '<h5><i class="fa fa-exclamation-triangle"></i> 无法推送Config</h5>' +
                '<p><strong>原因:</strong> ' + getReasonText(reason) + '</p>' +
                '<p><strong>建议:</strong></p>' +
                '<ul>' + suggestionHtml + '</ul>' +
                '</div>';
            
            jq("#danger-message-area").html(alertHtml);
            jq("#danger-modal").modal('show');
        }
        
        function addDebugLog(icon, message) {
            var timestamp = new Date().toLocaleTimeString();
            var logEntry = '<div class="debug-log-entry">' +
                '<span class="text-muted">[' + timestamp + ']</span> ' +
                '<span>' + icon + '</span> ' +
                '<span>' + message + '</span>' +
                '</div>';
            
            var jqlogDisplay = jq('#debug-log-display');
            jqlogDisplay.append(logEntry);
            jqlogDisplay.scrollTop(jqlogDisplay[0].scrollHeight);
        }
        
        window.clearDebugLog = function() {
            jq('#debug-log-display').empty();
            jq('#push-params-display').html('<p class=\"text-muted\">点击推送按钮时显示参数</p>');
            jq('#module-match-display').html('<p class=\"text-muted\">显示匹配的模块列表</p>');
        };
        
        // ==================== 方案2：Environment一致性检查器函数 ====================
        
        window.openEnvironmentChecker = function() {
            if (!jq('#environment-checker-modal').length) {
                createEnvironmentCheckerModal();
            }
            jq('#environment-checker-modal').modal('show');
            runEnvironmentCheck();
        };
        
        window.autoFixEnvironments = function() {
            if (confirm('确定要自动修复Environment不匹配的问题吗？这将修改Config表中的environment字段。')) {
                jq.ajax({
                    url: '/config/autoFixEnvironments.json',
                    method: 'POST',
                    success: function(response) {
                        if (response.success) {
                            notice('自动修复完成: ' + response.message, true);
                            runEnvironmentCheck(); // 重新检查
                        } else {
                            notice('自动修复失败: ' + response.message, false);
                        }
                    },
                    error: function() {
                        notice('自动修复请求失败', false);
                    }
                });
            }
        };
        
        // ==================== 配置操作工具函数 ====================
        
        function setConfigButtonLoading(jqBtn, isLoading, operation) {
            if (isLoading) {
                var loadingText = '';
                switch(operation) {
                    case 'deleting':
                        loadingText = '<i class="fa fa-spinner fa-spin"></i> ' + i18n.get('operation.deleting');
                        break;
                    default:
                        loadingText = '<i class="fa fa-spinner fa-spin"></i> 处理中...';
                }
                
                jqBtn.prop('disabled', true)
                    .data('original-html', jqBtn.html())
                    .html(loadingText)
                    .addClass('btn-loading');
            } else {
                jqBtn.prop('disabled', false)
                    .html(jqBtn.data('original-html') || jqBtn.html())
                    .removeClass('btn-loading');
            }
        }
        
        function showConfigSuccess(title, message) {
            var content = '<strong>' + title + '</strong>';
            if (message && message.trim().length > 0) {
                content += '<br><small class="text-muted">' + message + '</small>';
            }
            
            var alertHtml = '<div class="alert alert-success alert-dismissible fade show" role="alert">' +
                '<i class="fa fa-check-circle"></i> ' + content +
                '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
                '<span aria-hidden="true">&times;</span>' +
                '</button>' +
                '</div>';
            
            if (jq('#config-alert-container').length === 0) {
                jq('body').prepend('<div id="config-alert-container" style="position: fixed; top: 70px; right: 20px; z-index: 9999; width: 350px;"></div>');
            }
            var successElement = jq(alertHtml);
            jq('#config-alert-container').append(successElement);
            
            setTimeout(function() {
                successElement.fadeOut(300, function() {
                    jq(this).remove();
                });
            }, 3000);
        }
        
        function showConfigError(title, message) {
            var content = '<strong>' + title + '</strong>';
            if (message && message.trim().length > 0) {
                content += '<br><small class="text-muted">' + message + '</small>';
            }
            
            var alertHtml = '<div class="alert alert-danger alert-dismissible fade show" role="alert">' +
                '<i class="fa fa-exclamation-triangle"></i> ' + content +
                '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
                '<span aria-hidden="true">&times;</span>' +
                '</button>' +
                '</div>';
            
            if (jq('#config-alert-container').length === 0) {
                jq('body').prepend('<div id="config-alert-container" style="position: fixed; top: 70px; right: 20px; z-index: 9999; width: 350px;"></div>');
            }
            var errorElement = jq(alertHtml);
            jq('#config-alert-container').append(errorElement);
            
            setTimeout(function() {
                errorElement.fadeOut(300, function() {
                    jq(this).remove();
                });
            }, 5000);
        }
        
        // ==================== 数据库调试器函数 ====================
        
        window.openDatabaseDebugger = function() {
            if (!jq('#database-debugger-modal').length) {
                createDatabaseDebuggerModal();
            }
            jq('#database-debugger-modal').modal('show');
        };
        
        function createDatabaseDebuggerModal() {
            var modalHtml = '<div class="modal fade" id="database-debugger-modal" tabindex="-1">' +
                '<div class="modal-dialog modal-xl">' +
                '<div class="modal-content">' +
                '<div class="modal-header">' +
                '<h4 class="modal-title"><i class="fa fa-database"></i> 数据库调试器</h4>' +
                '<button type="button" class="close" data-dismiss="modal">' +
                '<span aria-hidden="true">×</span>' +
                '</button>' +
                '</div>' +
                '<div class="modal-body">' +
                '<div class="row">' +
                '<div class="col-md-6">' +
                '<h5><i class="fa fa-cog"></i> Config数据</h5>' +
                '<button class="btn btn-primary btn-sm" onclick="queryAllConfigs()">查询所有Config</button>' +
                '<div id="config-data-display" class="mt-3">' +
                '<p class="text-muted">点击上方按钮查询Config数据</p>' +
                '</div>' +
                '</div>' +
                '<div class="col-md-6">' +
                '<h5><i class="fa fa-server"></i> Module数据</h5>' +
                '<button class="btn btn-info btn-sm" onclick="queryAllModules()">查询所有Module</button>' +
                '<div id="module-data-display" class="mt-3">' +
                '<p class="text-muted">点击上方按钮查询Module数据</p>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '<div class="row mt-4">' +
                '<div class="col-12">' +
                '<h5><i class="fa fa-search"></i> 匹配分析</h5>' +
                '<div class="form-group">' +
                '<label>应用名称:</label>' +
                '<input type="text" id="debug-app-name" class="form-control" placeholder="输入应用名称">' +
                '</div>' +
                '<div class="form-group">' +
                '<label>环境:</label>' +
                '<input type="text" id="debug-environment" class="form-control" placeholder="输入环境名称">' +
                '</div>' +
                '<button class="btn btn-warning" onclick="analyzeMatching()">分析匹配情况</button>' +
                '<div id="matching-analysis-display" class="mt-3">' +
                '<p class="text-muted">填写应用名称和环境后点击分析</p>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '<div class="modal-footer">' +
                '<button type="button" class="btn btn-secondary" data-dismiss="modal">关闭</button>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '</div>';
            jq('body').append(modalHtml);
        }
        
        window.queryAllConfigs = function() {
            jq('#config-data-display').html('<i class="fa fa-spinner fa-spin"></i> 查询中...');
            jq.ajax({
                url: '/config/debugQuery.json',
                method: 'GET',
                success: function(response) {
                    if (response.success && response.data) {
                        displayConfigData(response.data);
                    } else {
                        jq('#config-data-display').html('<p class="text-danger">查询失败: ' + (response.message || '未知错误') + '</p>');
                    }
                },
                error: function() {
                    jq('#config-data-display').html('<p class="text-danger">查询请求失败</p>');
                }
            });
        };
        
        window.queryAllModules = function() {
            jq('#module-data-display').html('<i class="fa fa-spinner fa-spin"></i> 查询中...');
            jq.ajax({
                url: '/module/debugQuery.json',
                method: 'GET',
                success: function(response) {
                    if (response.success && response.data) {
                        displayModuleData(response.data);
                    } else {
                        jq('#module-data-display').html('<p class="text-danger">查询失败: ' + (response.message || '未知错误') + '</p>');
                    }
                },
                error: function() {
                    jq('#module-data-display').html('<p class="text-danger">查询请求失败</p>');
                }
            });
        };
        
        window.analyzeMatching = function() {
            var appName = jq('#debug-app-name').val().trim();
            var environment = jq('#debug-environment').val().trim();
            
            if (!appName || !environment) {
                jq('#matching-analysis-display').html('<p class="text-warning">请填写应用名称和环境</p>');
                return;
            }
            
            jq('#matching-analysis-display').html('<i class="fa fa-spinner fa-spin"></i> 分析中...');
            jq.ajax({
                url: '/config/debugMatching.json',
                method: 'GET',
                data: { appName: appName, environment: environment },
                success: function(response) {
                    if (response.success && response.data) {
                        displayMatchingAnalysis(response.data);
                    } else {
                        jq('#matching-analysis-display').html('<p class="text-danger">分析失败: ' + (response.message || '未知错误') + '</p>');
                    }
                },
                error: function() {
                    jq('#matching-analysis-display').html('<p class="text-danger">分析请求失败</p>');
                }
            });
        };
        
        function displayConfigData(configs) {
            if (!configs || configs.length === 0) {
                jq('#config-data-display').html('<p class="text-warning">没有找到Config数据</p>');
                return;
            }
            
            var html = '<table class="table table-sm table-striped">' +
                '<thead><tr><th>应用名</th><th>环境</th><th>创建时间</th></tr></thead>' +
                '<tbody>';
            configs.forEach(function(config) {
                html += '<tr>' +
                    '<td><code>' + (config.appName || 'N/A') + '</code></td>' +
                    '<td><code>' + (config.environment || 'N/A') + '</code></td>' +
                    '<td>' + (config.gmtCreate || 'N/A') + '</td>' +
                    '</tr>';
            });
            html += '</tbody></table>';
            jq('#config-data-display').html(html);
        }
        
        function displayModuleData(modules) {
            if (!modules || modules.length === 0) {
                jq('#module-data-display').html('<p class="text-warning">没有找到Module数据</p>');
                return;
            }
            
            var html = '<table class="table table-sm table-striped">' +
                '<thead><tr><th>应用名</th><th>环境</th><th>IP</th><th>状态</th><th>心跳时间</th></tr></thead>' +
                '<tbody>';
            modules.forEach(function(module) {
                html += '<tr>' +
                    '<td><code>' + (module.appName || 'N/A') + '</code></td>' +
                    '<td><code>' + (module.environment || 'N/A') + '</code></td>' +
                    '<td>' + (module.ip || 'N/A') + '</td>' +
                    '<td>' + (module.status || 'N/A') + '</td>' +
                    '<td>' + (module.gmtModified || 'N/A') + '</td>' +
                    '</tr>';
            });
            html += '</tbody></table>';
            jq('#module-data-display').html(html);
        }
        
        function displayMatchingAnalysis(analysis) {
            var html = '<div class="alert alert-info">' +
                '<h6><i class="fa fa-info-circle"></i> 匹配分析结果</h6>' +
                '<p><strong>匹配的Module数量:</strong> ' + (analysis.moduleCount || 0) + '</p>' +
                '<p><strong>匹配的Config数量:</strong> ' + (analysis.configCount || 0) + '</p>';
            
            if (analysis.issues && analysis.issues.length > 0) {
                html += '<p><strong>发现的问题:</strong></p><ul>';
                analysis.issues.forEach(function(issue) {
                    html += '<li class="text-danger">' + issue + '</li>';
                });
                html += '</ul>';
            }
            
            if (analysis.suggestions && analysis.suggestions.length > 0) {
                html += '<p><strong>建议:</strong></p><ul>';
                analysis.suggestions.forEach(function(suggestion) {
                    html += '<li class="text-success">' + suggestion + '</li>';
                });
                html += '</ul>';
            }
            
            html += '</div>';
            
            if (analysis.modules && analysis.modules.length > 0) {
                html += '<h6>匹配的Module:</h6>';
                html += '<table class="table table-sm"><thead><tr><th>应用名</th><th>环境</th><th>IP</th></tr></thead><tbody>';
                analysis.modules.forEach(function(module) {
                    html += '<tr><td>' + module.appName + '</td><td>' + module.environment + '</td><td>' + module.ip + '</td></tr>';
                });
                html += '</tbody></table>';
            }
            
            jq('#matching-analysis-display').html(html);
        }
        
        // ==================== jQuery DOM Ready 事件绑定 ====================
        
        jq(function () {
            jq(".btn-push").on('click', function () {
                var appName = jq(this).attr('data-app');
                var environment = jq(this).attr('data-env');
                
                // 显示调试面板并记录推送参数
                showConfigDebugPanel();
                logPushParams(appName, environment);
                
                // 先查询匹配的模块
                checkModuleMatches(appName, environment, function(matchResult) {
                    logModuleMatches(matchResult);
                    
                    if (matchResult.hasMatches) {
                        // 有匹配的模块，执行推送
                        executePushConfig(appName, environment);
                    } else {
                        // 没有匹配的模块，显示详细原因
                        showNoMatchReason(matchResult.reason, matchResult.suggestions);
                    }
                });
            })
            
            jq(".btn-config-delete").on('click', function () {
                var jqBtn = jq(this);
                var appName = jqBtn.attr('data-app');
                var environment = jqBtn.attr('data-env');
                
                // 确认删除操作
                if (confirm(i18n.get('confirm.delete.config', appName, environment))) {
                    // 设置按钮加载状态
                    setConfigButtonLoading(jqBtn, true, 'deleting');
                    
                    // 执行删除
                    jq.ajax({
                        url: '/config/delete.json',
                        method: 'POST',
                        data: {
                            appName: appName,
                            environment: environment
                        },
                        success: function(response) {
                            setConfigButtonLoading(jqBtn, false);
                            
                            if (response.success) {
                                // 成功：显示成功消息并刷新页面
                                showConfigSuccess(i18n.get('operation.delete.success'), response.message);
                                setTimeout('window.location.reload()', 1000);
                            } else {
                                // 失败：显示错误信息
                                showConfigError(i18n.get('operation.delete.failed'), response.message);
                            }
                        },
                        error: function() {
                            setConfigButtonLoading(jqBtn, false);
                            showConfigError(i18n.get('operation.delete.failed'), 'Network error or server unavailable');
                        }
                    });
                }
            })
        });
    
    function createEnvironmentCheckerModal() {
        var modalHtml = '<div class="modal fade" id="environment-checker-modal" tabindex="-1">' +
            '<div class="modal-dialog modal-lg">' +
            '<div class="modal-content">' +
            '<div class="modal-header bg-info">' +
            '<h4 class="modal-title">' +
            '<i class="fa fa-check-circle"></i> Environment一致性检查器' +
            '</h4>' +
            '<button type="button" class="close" data-dismiss="modal">' +
            '<span>×</span>' +
            '</button>' +
            '</div>' +
            '<div class="modal-body">' +
            '<div id="environment-check-content">' +
            '<!-- 检查结果内容 -->' +
            '</div>' +
            '</div>' +
            '<div class="modal-footer">' +
            '<button type="button" class="btn btn-primary" onclick="runEnvironmentCheck()">' +
            '<i class="fa fa-refresh"></i> 重新检查' +
            '</button>' +
            '<button type="button" class="btn btn-success" onclick="autoFixEnvironments()" id="auto-fix-btn" style="display:none;">' +
            '<i class="fa fa-magic"></i> 自动修复' +
            '</button>' +
            '<button type="button" class="btn btn-secondary" data-dismiss="modal">关闭</button>' +
            '</div>' +
            '</div>' +
            '</div>' +
            '</div>';
        jq('body').append(modalHtml);
    }
    
    function runEnvironmentCheck() {
        var jqcontent = jq('#environment-check-content');
        jqcontent.html('<div class=\"text-center\"><i class=\"fa fa-spinner fa-spin\"></i> 正在检查...</div>');
        
        jq.ajax({
            url: '/config/checkEnvironments.json',
            method: 'GET',
            success: function(response) {
                if (response.success) {
                    displayEnvironmentCheckResult(response.data);
                } else {
                    jqcontent.html('<div class=\"alert alert-danger\">检查失败: ' + response.message + '</div>');
                }
            },
            error: function() {
                jqcontent.html('<div class=\"alert alert-danger\">检查失败，请重试</div>');
            }
        });
    }
    
    function displayEnvironmentCheckResult(data) {
        var html = '';
        
        // 总体状态
        if (data.hasIssues) {
            html += '<div class="alert alert-warning">' +
                '<h5><i class="fa fa-exclamation-triangle"></i> 发现Environment不匹配问题</h5>' +
                '<p>发现 ' + data.issueCount + ' 个不匹配的Config配置</p>' +
                '</div>';
            jq('#auto-fix-btn').show();
        } else {
            html += '<div class="alert alert-success">' +
                '<h5><i class="fa fa-check"></i> Environment配置正常</h5>' +
                '<p>所有Config的Environment都有对应的模块</p>' +
                '</div>';
            jq('#auto-fix-btn').hide();
        }
        
        // 详细的匹配表
        if (data.details && data.details.length > 0) {
            html += '<h5>📋 详细匹配情况</h5>';
            html += '<table class="table table-sm table-striped">' +
                '<thead>' +
                '<tr>' +
                '<th>Config (AppName)</th>' +
                '<th>Config Environment</th>' +
                '<th>匹配状态</th>' +
                '<th>可用的Module Environments</th>' +
                '<th>建议</th>' +
                '</tr>' +
                '</thead>' +
                '<tbody>';
            
            data.details.forEach(function(item) {
                var statusClass = item.matched ? 'text-success' : 'text-danger';
                var statusIcon = item.matched ? 'fa-check' : 'fa-times';
                var statusText = item.matched ? '匹配' : '不匹配';
                
                var envBadges = '';
                for (var i = 0; i < item.availableEnvironments.length; i++) {
                    envBadges += '<span class="badge badge-secondary">' + item.availableEnvironments[i] + '</span> ';
                }
                
                html += '<tr>' +
                    '<td>' + item.configAppName + '</td>' +
                    '<td><span class="badge badge-primary">' + item.configEnvironment + '</span></td>' +
                    '<td class="' + statusClass + '">' +
                    '<i class="fa ' + statusIcon + '"></i> ' + statusText +
                    '</td>' +
                    '<td>' + envBadges + '</td>' +
                    '<td>' + item.suggestion + '</td>' +
                    '</tr>';
            });
            
            html += '</tbody></table>';
        }
        
        jq('#environment-check-content').html(html);
    }
        
</script>

<!-- 调试面板样式 -->
<style>
    .debug-content {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        padding: 10px;
        min-height: 100px;
    }
    
    .debug-log {
        background: #1e1e1e;
        color: #f8f9fa;
        border-radius: 4px;
        padding: 10px;
        height: 200px;
        overflow-y: auto;
        font-family: 'Courier New', monospace;
        font-size: 12px;
    }
    
    .debug-log-entry {
        margin-bottom: 5px;
        padding: 2px 5px;
        border-radius: 2px;
        line-height: 1.4;
    }
    
    .param-item {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 3px;
        padding: 8px;
    }
</style>

</body>
</html>
<!DOCTYPE html>
<html>
<head>
    #set($pageTitle = $i18n.get("title.module.list"))
    #parse("blocks/html-head.vm")
    <style>
        /* 按钮Loading状态样式 */
        .btn-loading {
            opacity: 0.8;
            cursor: not-allowed !important;
            position: relative;
        }
        
        .btn-loading:hover {
            opacity: 0.8 !important;
        }
        
        .btn-loading .fa-spinner {
            margin-right: 8px;
        }
        
        /* 模态框Loading遮罩样式 */
        .modal-loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1060;
            border-radius: 4px;
        }
        
        .modal-loading-overlay .loading-content {
            text-align: center;
            color: white;
        }
        
        .modal-loading-overlay .loading-content h4 {
            margin: 20px 0 10px 0;
            color: white;
        }
        
        .modal-loading-overlay .loading-content p {
            margin: 10px 0 20px 0;
            color: #ccc;
        }
        
        .progress-container {
            width: 300px;
            margin: 15px auto;
        }
        
        .progress-step {
            font-size: 14px;
            margin-bottom: 8px;
        }
        
        .progress-bar-custom {
            width: 100%;
            height: 6px;
            background-color: #333;
            border-radius: 3px;
            overflow: hidden;
        }
        
        .progress-bar-fill {
            height: 100%;
            background: linear-gradient(90deg, #007bff, #28a745);
            border-radius: 3px;
            transition: width 0.3s ease;
        }
        
        /* 状态指示器样式 */
        .status-indicators {
            display: flex;
            align-items: center;
            gap: 5px;
            flex-wrap: wrap;
        }
        
        .status-indicators .fa-circle {
            font-size: 10px;
            margin-right: 3px;
        }
        
        /* 操作进度显示 */
        .operation-progress {
            margin-top: 5px;
            font-size: 11px;
        }
        
        .operation-progress .progress {
            height: 3px;
            margin-bottom: 2px;
        }
        
        /* 连接状态颜色 */
        .status-fast { color: #28a745; }
        .status-normal { color: #ffc107; }
        .status-slow { color: #dc3545; }
        .status-offline { color: #6c757d; }
        
        /* 操作按钮状态 */
        .btn-operation {
            margin-right: 3px;
            margin-bottom: 3px;
        }
        
        .btn-operation:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        /* 详细错误信息模态框 */
        .error-detail-modal .modal-body {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .error-detail-content {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 3px;
            padding: 10px;
            font-family: monospace;
            font-size: 12px;
            white-space: pre-wrap;
        }
    </style>
</head>
<body class="hold-transition sidebar-mini">
<!-- Site wrapper -->
<div class="wrapper">
    #parse("blocks/navbar.vm")

    #set($currentPage = "module")
    #parse("blocks/sidebar.vm")

    <!-- Content Wrapper. Contains page content -->
    <div class="content-wrapper">
        <!-- Content Header (Page header) -->
        <section class="content-header">
            <div class="container-fluid">
                <div class="row mb-2">
                    <div class="col-sm-6">
                        <h1>$i18n.get("title.module.list")</h1>
                    </div>
                    <div class="col-sm-6">
                        <ol class="breadcrumb float-sm-right">
                            <li class="breadcrumb-item"><a href="#">$i18n.get("page.home")</a></li>
                            <li class="breadcrumb-item active">$i18n.get("title.module.list")</li>
                        </ol>
                    </div>
                </div>
            </div><!-- /.container-fluid -->
        </section>

        <!-- Main content -->
        <section class="content">
            <div class="row">
                <div class="col-12">
                    <div class="card card-blue card-outline">
                        <div class="card-header border-0">
                            <h5 class="card-title text-blue">
                                $i18n.get("title.module.list") <i class="fa fa-heartbeat"></i>
                            </h5>
                            <div class="card-tools">
                                <div class="btn-group float-right" role="group" style="margin-right: 10px;">
                                    <button id="btn-refresh-status" type="button" class="btn btn-info btn-sm" 
                                            title="手动刷新所有模块状态" onclick="refreshAllStatus()">
                                        <i class="fa fa-refresh"></i>
                                        刷新状态
                                    </button>
                                    <button id="btn-toggle-monitor" type="button" class="btn btn-success btn-sm" 
                                            title="开启/关闭自动状态监控" onclick="toggleMonitorButton()">
                                        <i class="fa fa-play"></i>
                                        <span id="monitor-status-text">监控中</span>
                                    </button>
                                </div>
                                <button type="button" class="btn btn-primary btn-sm float-right"
                                        data-loading-text="searching" id="btn-install">
                                    $i18n.get("button.install.module")
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-lg-12">
                                    <form class="form-inline" method="get" action="list.htm">
                                        <div class="form-group" style="margin-left:10px">
                                            <label for="appName">$i18n.get("label.app.name"):</label>
                                            <input type="text" class="form-control" placeholder="$i18n.get('label.app.name')" 
                                                   name="appName" value="$!requestParams.appName" autocomplete="off"
                                                   data-toggle="tooltip" title="$i18n.get('label.app.name')" 
                                                   style="width: 210px;margin-left:10px">
                                        </div>
                                        <div class="form-group" style="margin-left: 10px">
                                            <label for="ip">$i18n.get("form.machine.ip"):</label>
                                            <input type="text" class="form-control" placeholder="$i18n.get('form.ip.address')" 
                                                   name="ip" value="$!requestParams.ip" autocomplete="off"
                                                   data-toggle="tooltip" title="$i18n.get('form.ip.address')" 
                                                   style="width: 210px;margin-left:10px">
                                        </div>
                                        <div class="form-group" style="margin-left: 20px">
                                            <button type="submit" class="btn btn-primary"
                                                    data-loading-text="searching" id="search-online-btn">
                                                $i18n.get("button.query") <i class="fa fa-search icon-on-right bigger"></i>
                                            </button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                            <table class="table table-hover table-striped" style="word-break: break-all;">
                                #if($pagerWrapper.content && $pagerWrapper.content.size() > 0)
                                    <thead>
                                    <tr>
                                        <th>$i18n.get("table.app.name")</th>
                                        <th>$i18n.get("table.environment")</th>
                                        <th>$i18n.get("form.machine.ip")</th>
                                        <th>$i18n.get("table.port")</th>
                                        <th>$i18n.get("table.version")</th>
                                        <th>$i18n.get("label.status")</th>
                                        <th>连接状态</th>
                                        <th>$i18n.get("label.heartbeat.time")</th>
                                        <th width="120px">$i18n.get("table.operation")</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                        #foreach($data in $pagerWrapper.content)
                                        <tr class="module-row" data-app="$!{data.appName}" data-ip="$!{data.ip}" data-port="$!{data.port}">
                                            <td style="vertical-align: middle">$!data.appName</td>
                                            <td style="vertical-align: middle">$!{data.environment}</td>
                                            <td style="vertical-align: middle">$!data.ip</td>
                                            <td style="vertical-align: middle">$!{data.port}</td>
                                            <td style="vertical-align: middle">$!{data.version}</td>
                                            <td style="vertical-align: middle">
                                                #if($!{data.status.desc}=='已激活')
                                                    <span class="badge badge-success">$i18n.get("status.activated")</span>
                                                #else
                                                    <span class="badge badge-warning">$i18n.get("status.unactivated")</span>
                                                #end
                                            </td>
                                            <td style="vertical-align: middle">
                                                <div class="status-indicators">
                                                    <i class="fa fa-circle text-muted" title="未检测"></i>
                                                    <span class="badge badge-secondary">待检测</span>
                                                </div>
                                                <div class="operation-status"></div>
                                            </td>
                                            <td style="vertical-align: middle">$!{data.gmtModified}</td>
                                            <td style="vertical-align: middle">
                                                #if($!{data.status.desc}=='已激活')
                                                    <button class="btn btn-warning btn-xs btn-frozen" data-toggle="tooltip"
                                                            title="$i18n.get('module.freeze')" data-ip="$!{data.ip}"
                                                            data-app="$!{data.appName}">$i18n.get("module.freeze")
                                                    </button>
                                                #else
                                                    <button class="btn btn-success btn-xs btn-active" data-toggle="tooltip"
                                                            title="$i18n.get('button.activate')" data-ip="$!{data.ip}"
                                                            data-app="$!{data.appName}">$i18n.get("button.activate")
                                                    </button>
                                                #end
                                                <button class="btn btn-primary btn-xs btn-reload" data-toggle="tooltip"
                                                        title="$i18n.get('module.reload.plugin')" data-ip="$!{data.ip}"
                                                        data-app="$!{data.appName}">$i18n.get("module.reload")
                                                </button>
                                            </td>
                                        </tr>
                                        #end
                                    </tbody>
                                #else
                                    <h5 style="padding-left: 10px;margin-top: 20px">$i18n.get("module.no.heartbeat")</h5>
                                #end
                            </table>
                        </div>
                        <div class="card-footer clearfix">
                            #parse("blocks/pager.vm")
                        </div>
                    </div>
                </div>
            </div>
        </section>
        <!-- /.content -->
    </div>
    <!-- /.content-wrapper -->

    #parse("blocks/footer.vm")
</div>
<!-- ./wrapper -->

#parse("blocks/header-scripts.vm")
#parse("blocks/fakeloader.vm")
#parse("blocks/install-module.vm")

<script type="application/javascript">
    jQuery(function($){
        $(".btn-active").on('click',function () {
            var appName = $(this).attr('data-app');
            var ip = $(this).attr('data-ip');
            innerPost("/module/active.json", {'appName': appName,'ip':ip}, function (response) {
                if (response.success) {
                    notice(response.message, response.success)
                    setTimeout('window.location.reload()', 1000)
                } else {
                    notice(response.message, response.success)
                }
            });
        })
        
        $(".btn-frozen").on('click',function () {
            var appName = $(this).attr('data-app');
            var ip = $(this).attr('data-ip');
            innerPost("/module/frozen.json", {'appName': appName,'ip':ip}, function (response) {
                if (response.success) {
                    notice(response.message, response.success)
                    setTimeout('window.location.reload()', 1000)
                } else {
                    notice(response.message, response.success)
                }
            });
        })
        
        $(".btn-reload").on('click', function () {
            var $btn = $(this);
            var $row = $btn.closest('tr');
            var appName = $btn.attr('data-app');
            var ip = $btn.attr('data-ip');
            
            // 1. 设置按钮加载状态
            setButtonLoading($btn, true, 'reloading');
            showOperationProgress($row, 'reload');
            
            // 2. 执行reload
            innerPost("/module/reload.json", {'appName': appName, 'ip': ip}, function (response) {
                setButtonLoading($btn, false);
                hideOperationProgress($row);
                
                if (response.success) {
                    // 成功：显示成功信息并更新状态
                    showSuccess(response.message, response.data);
                    updateModuleStatus($row, 'reload-success');
                    
                    // 3秒后验证模块状态
                    setTimeout(function() {
                        verifyModuleStatus(appName, ip, $row);
                    }, 3000);
                    
                } else {
                    // 失败：显示详细错误信息
                    showError(i18n.get('operation.reload.failed'), response.message, response.data);
                    updateModuleStatus($row, 'reload-failed');
                }
            });
        })
        
        $("#btn-install").on("click", function () {
            var modal = $('#start-install-modal');
            
            // 重置表单，确保干净的状态
            modal.find('#startInstallForm')[0].reset();
            // 重新设置端口的默认值
            modal.find("input[name='port']").val('12580');
            // 重新设置环境的默认值
            modal.find("select[name='environment']").val('default');
            
            modal.on('shown.bs.modal', function () {
                $(this).css('display', 'block');
                var modalHeight = $(window).height() / 2 - $('#start-install-modal .modal-dialog').height() / 2;
                $(this).find('.modal-dialog').css({
                    'margin-top': modalHeight
                });
                // 聚焦到第一个输入框
                modal.find("input[name='appName']").focus();
            });
            modal.modal('show')
        })

        // 定义按钮状态管理函数
        function setButtonLoading($button, isLoading) {
            if (isLoading) {
                $button.prop('disabled', true)
                       .html('<i class="fa fa-spinner fa-spin"></i> ' + i18n.get('button.registering'))
                       .addClass('btn-loading');
            } else {
                $button.prop('disabled', false)
                       .html(i18n.get('button.register.module'))
                       .removeClass('btn-loading');
            }
        }

        // 定义验证步骤
        var validationSteps = [
            { key: 'validating', message: 'step.validating.form', duration: 800 },
            { key: 'connecting', message: 'step.connecting.remote', duration: 5000 },
            { key: 'checking', message: 'step.checking.repeater', duration: 3000 },
            { key: 'registering', message: 'step.registering.module', duration: 2000 }
        ];

        // 模态框loading管理
        function showModalLoading() {
            $('#modal-loading').fadeIn(300);
        }

        function hideModalLoading() {
            $('#modal-loading').fadeOut(200);
        }

        // 显示进度步骤
        function showProgress(step, current, total) {
            var percent = Math.round((current / total) * 100);
            $("#loading-message").text(i18n.get(step.message));
            $("#progress-step").text(i18n.get(step.message));
            $("#progress-bar").css('width', percent + '%');
            
            var timeText = step.duration > 1000 ? 
                Math.round(step.duration/1000) + 's' : 
                step.duration + 'ms';
            $("#loading-detail").html(
                i18n.get('progress.step.detail', current, total, percent) + 
                '<br><small>' + i18n.get('progress.estimated.time') + ': ' + timeText + '</small>'
            );
            
            if (i18n.debug) {
                console.log('[Progress] Step:', step.key, 'Progress:', percent + '%');
            }
        }

        // 请求超时和取消管理
        var requestTimeout;
        var currentXHR;
        var maxWaitTime = 30000; // 30秒超时

        function cancelRequest(reason) {
            if (currentXHR &amp;&amp; currentXHR.readyState !== 4) {
                currentXHR.abort();
            }
            clearTimeout(requestTimeout);
            hideModalLoading();
            hideLoading(10);
            
            var message = reason === 'timeout' ? 
                i18n.get('error.request.timeout') : 
                i18n.get('info.request.cancelled');
            notice(message, false);
            
            if (i18n.debug) {
                console.log('[Request] Cancelled:', reason);
            }
        }

        // 取消请求按钮事件
        $("#cancel-request").on('click', function() {
            cancelRequest('user');
        });

        // 显示重试模态框
        function showRetryModal(errorMessage, retryCallback) {
            var retryModalHtml = '<div class="modal fade" id="retry-modal" tabindex="-1" role="dialog" aria-hidden="true">' +
                '<div class="modal-dialog">' +
                '<div class="modal-content bg-warning">' +
                '<div class="modal-header">' +
                '<h4 class="modal-title">' +
                '<i class="fa fa-exclamation-triangle"></i> ' + i18n.get('modal.retry.title', '连接失败') +
                '</h4>' +
                '<button type="button" class="close" data-dismiss="modal" aria-label="Close">' +
                '<span aria-hidden="true">×</span>' +
                '</button>' +
                '</div>' +
                '<div class="modal-body">' +
                '<p><strong>' + i18n.get('error.details', '错误详情') + '：</strong></p>' +
                '<p class="text-muted">' + errorMessage + '</p>' +
                '<hr>' +
                '<p>' + i18n.get('error.connection.failed.details') + '</p>' +
                '</div>' +
                '<div class="modal-footer">' +
                '<button type="button" class="btn btn-outline-dark" data-dismiss="modal">' +
                '<i class="fa fa-times"></i> ' + i18n.get('button.close') +
                '</button>' +
                '<button type="button" class="btn btn-outline-dark" id="retry-btn">' +
                '<i class="fa fa-refresh"></i> ' + i18n.get('button.retry') +
                '</button>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '</div>';
            
            // 移除已存在的重试模态框
            $('#retry-modal').remove();
            
            // 添加到页面并显示
            $('body').append(retryModalHtml);
            $('#retry-modal').modal('show');
            
            // 绑定重试按钮事件
            $('#retry-btn').on('click', function() {
                $('#retry-modal').modal('hide');
                setTimeout(function() {
                    $('#retry-modal').remove();
                    retryCallback();
                }, 300);
            });
            
            // 模态框关闭时清理
            $('#retry-modal').on('hidden.bs.modal', function() {
                $(this).remove();
            });
        }

        $("#start-install-btn").on('click', function () {
            var $button = $(this);
            
            // 限制选择器在模态框内部，避免与页面其他元素冲突
            var modal = $('#start-install-modal');
            var appName = modal.find("input[name='appName']").val();
            var ip = modal.find("input[name='ip']").val();
            var port = modal.find("input[name='port']").val();
            var environment = modal.find("select[name='environment']").val();
            
            // 清理输入值
            appName = appName ? appName.trim() : '';
            ip = ip ? ip.trim() : '';
            port = port ? port.trim() : '';
            environment = environment || 'default';
            
            // 调试信息（开发时可以查看）
            if (i18n.debug) {
                console.log('[Form Validation] appName:', '"' + appName + '"');
                console.log('[Form Validation] ip:', '"' + ip + '"');
                console.log('[Form Validation] port:', '"' + port + '"');
                console.log('[Form Validation] environment:', '"' + environment + '"');
            }
            
            // 验证应用名
            if (!appName) {
                alert(i18n.get('js.error.appname.required'));
                modal.find("input[name='appName']").focus();
                return;
            }
            
            // 验证IP地址
            if (!ip) {
                alert(i18n.get('js.error.ip.required'));
                modal.find("input[name='ip']").focus();
                return;
            }
            
            // 验证IP格式
            var ipRegex = /^(\d{1,3}\.){3}\d{1,3}$/;
            if (!ipRegex.test(ip)) {
                alert(i18n.get('js.error.ip.format'));
                modal.find("input[name='ip']").focus();
                return;
            }
            
            // 验证端口
            if (port &amp;&amp; (isNaN(port) || port < 1 || port > 65535)) {
                alert(i18n.get('js.error.port.range'));
                modal.find("input[name='port']").focus();
                return;
            }
            
            // 立即设置按钮为loading状态并显示模态框遮罩
            setButtonLoading($button, true);
            showModalLoading();
            showLoading(300);
            
            // 模拟分步骤进度显示
            var currentStep = 0;
            var progressInterval = setInterval(function() {
                if (currentStep < validationSteps.length) {
                    showProgress(validationSteps[currentStep], currentStep + 1, validationSteps.length);
                    currentStep++;
                } else {
                    clearInterval(progressInterval);
                }
            }, 1000);
            
            // 设置请求超时
            requestTimeout = setTimeout(function() {
                clearInterval(progressInterval);
                cancelRequest('timeout');
                setButtonLoading($button, false);
            }, maxWaitTime);
            
            // 发送AJAX请求
            currentXHR = $("#startInstallForm").ajaxSubmit({
                type: "post",
                url: "//" + host + "/module/install.json",
                success: function (data) {
                    clearInterval(progressInterval);
                    clearTimeout(requestTimeout);
                    setButtonLoading($button, false);
                    hideModalLoading();
                    hideLoading(10);
                    $("#start-install-modal").modal('hide');
                    
                    if (data.success) {
                        notice(data.message, data.success);
                        setTimeout('window.location.reload()', 1000);
                    } else {
                        notice(data.message, data.success);
                    }
                    
                    if (i18n.debug) {
                        console.log('[Request] Success:', data);
                    }
                },
                error: function (XMLHttpRequest) {
                    clearInterval(progressInterval);
                    clearTimeout(requestTimeout);
                    setButtonLoading($button, false);
                    hideModalLoading();
                    hideLoading(10);
                    
                    // 智能错误提示和重试机制
                    var errorMessage = i18n.get("msg.network.error");
                    var showRetry = false;
                    
                    if (XMLHttpRequest.status === 0) {
                        errorMessage = i18n.get("error.connection.timeout");
                        showRetry = true;
                    } else if (XMLHttpRequest.status >= 500) {
                        errorMessage = i18n.get("error.server.internal");
                        showRetry = true;
                    } else if (XMLHttpRequest.status === 404) {
                        errorMessage = i18n.get("error.server.notfound");
                    } else if (XMLHttpRequest.status === 400) {
                        errorMessage = XMLHttpRequest.responseText || i18n.get("error.bad.request");
                    }
                    
                    if (showRetry) {
                        showRetryModal(errorMessage, function() {
                            // 重试逻辑：重新触发click事件
                            $button.trigger('click');
                        });
                    } else {
                        notice(errorMessage, false);
                    }
                    
                    if (i18n.debug) {
                        console.log('[Request] Error:', XMLHttpRequest);
                    }
                }
            });
        });
        
        // 调试功能：在浏览器控制台中可以使用 debugModuleForm() 来检查表单状态
        window.debugModuleForm = function() {
            var modal = $('#start-install-modal');
            var appName = modal.find("input[name='appName']").val();
            var ip = modal.find("input[name='ip']").val();
            var port = modal.find("input[name='port']").val();
            var environment = modal.find("select[name='environment']").val();
            
            console.log('=== 模块注册表单调试信息 ===');
            console.log('模态框是否可见:', modal.is(':visible'));
            console.log('应用名输入框数量:', modal.find("input[name='appName']").length);
            console.log('应用名原始值:', '"' + (appName || '') + '"');
            console.log('应用名清理后:', '"' + (appName ? appName.trim() : '') + '"');
            console.log('IP地址:', '"' + (ip || '') + '"');
            console.log('端口号:', '"' + (port || '') + '"');
            console.log('运行环境:', '"' + (environment || '') + '"');
            console.log('表单元素:', modal.find('#startInstallForm')[0]);
            console.log('按钮状态:', $('#start-install-btn').prop('disabled'));
            console.log('Loading状态:', $('#modal-loading').is(':visible'));
            return {
                appName: appName ? appName.trim() : '',
                ip: ip ? ip.trim() : '',
                port: port ? port.trim() : '',
                environment: environment || 'default'
            };
        };

        // 高级调试功能：测试请求流程
        window.debugRequestFlow = function(testData) {
            if (!testData) {
                testData = {
                    appName: 'test-app',
                    ip: '127.0.0.1',
                    port: '12580',
                    environment: 'test'
                };
            }
            
            console.log('=== 模拟请求流程调试 ===');
            console.log('测试数据:', testData);
            
            // 填充表单
            var modal = $('#start-install-modal');
            modal.find("input[name='appName']").val(testData.appName);
            modal.find("input[name='ip']").val(testData.ip);
            modal.find("input[name='port']").val(testData.port);
            modal.find("select[name='environment']").val(testData.environment || 'default');
            
            console.log('表单已填充，可以手动点击注册按钮测试');
            
            // 显示模态框（如果未显示）
            if (!modal.is(':visible')) {
                modal.modal('show');
            }
        };

        // 国际化调试功能
        window.debugI18n = function() {
            console.log('=== 国际化调试信息 ===');
            console.log('当前语言环境:', navigator.language);
            console.log('调试模式:', i18n.debug);
            console.log('已加载消息数量:', Object.keys(i18n.messages || {}).length);
            
            // 测试关键消息
            var testKeys = [
                'button.registering',
                'step.connecting.remote',
                'error.request.timeout',
                'modal.retry.title'
            ];
            
            console.log('关键消息测试:');
            testKeys.forEach(function(key) {
                console.log('  ' + key + ':', i18n.get(key));
            });
            
            return i18n.messages;
        };

        // 版本解析调试功能
        window.debugVersionParsing = function(sampleResponse) {
            // 默认使用实际的sandbox响应格式
            var realSandboxResponse = '      ID : repeater\n' +
' VERSION : 1.0.0\n' +
'  AUTHOR : zhaoyb1990\n' +
'JAR_FILE : /root/.sandbox-module/repeater-module.jar\n' +
'   STATE : ACTIVE\n' +
'    MODE : {AGENT,ATTACH}\n' +
'   CLASS : com.alibaba.jvm.sandbox.repeater.module.RepeaterModule\n' +
'  LOADER : ModuleJarClassLoader[crc32=3909007247;file=/root/.sandbox-module/repeater-module.jar;]\n' +
'    cCnt : 0\n' +
'    mCnt : 0';

            var testResponse = sampleResponse || realSandboxResponse;
            
            console.log('=== 版本解析测试 ===');
            console.log('测试响应:', testResponse);
            
            // 模拟前端版本解析逻辑（与后端保持一致）
            function parseVersion(responseContent) {
                try {
                    if (!responseContent) return 'unknown';
                    
                    // 方法1：专门处理sandbox文本格式（优先级最高）
                    var sandboxPattern = /VERSION\s*:\s*([0-9\.\-a-zA-Z]+)/i;
                    var sandboxMatch = responseContent.match(sandboxPattern);
                    if (sandboxMatch) return sandboxMatch[1];
                    
                    // 方法2：处理JSON格式（向后兼容）
                    var jsonPattern = /"version"\s*:\s*"([^"]+)"/i;
                    var jsonMatch = responseContent.match(jsonPattern);
                    if (jsonMatch) return jsonMatch[1];
                    
                    // 方法3：通用版本模式
                    var generalPattern = /version["\s]*[:=\s]+["\s]*([0-9\.\-a-zA-Z]+)/i;
                    var generalMatch = responseContent.match(generalPattern);
                    if (generalMatch) return generalMatch[1];
                    
                    // 方法4：查找数字版本号
                    if (responseContent.toLowerCase().indexOf('repeater') !== -1) {
                        var numberPattern = /([0-9]+\.[0-9]+\.[0-9]+(?:-[a-zA-Z0-9]+)?)/;
                        var numberMatch = responseContent.match(numberPattern);
                        if (numberMatch) return numberMatch[1];
                        return '1.0.0';
                    }
                    
                    return 'unknown';
                } catch (e) {
                    return 'unknown';
                }
            }
            
            var parsedVersion = parseVersion(testResponse);
            console.log('解析结果:', parsedVersion);
            
            // 测试多种响应格式（包括实际格式）
            var testCases = [
                // 实际的sandbox文本格式
                realSandboxResponse,
                // 不同版本的sandbox格式
                'VERSION : 2.1.0-SNAPSHOT',
                'Version: 1.5.3',
                // JSON格式
                '{"success":true,"data":{"id":"repeater","version":"1.2.3","status":"ACTIVE"}}',
                '{"success":true,"module":{"name":"repeater","version":"2.0.0-SNAPSHOT"}}',
                // 其他格式
                'version: "1.5.0", module: repeater',
                'repeater module version=1.1.1',
                'version 3.0.0 repeater',
                // 边界情况
                'invalid response without version info',
                'repeater module without version',
                ''
            ];
            
            console.log('多种格式测试:');
            testCases.forEach(function(testCase, index) {
                var result = parseVersion(testCase);
                var preview = testCase.length > 50 ? testCase.substring(0, 50) + '...' : testCase;
                preview = preview.replace(/\n/g, '\\n'); // 处理换行符显示
                console.log('  测试' + (index + 1) + ':', result, '(响应:', preview + ')');
            });
            
            return parsedVersion;
        };

        // 性能调试功能
        window.debugPerformance = function() {
            console.log('=== 性能调试信息 ===');
            console.log('页面加载时间:', performance.now() + 'ms');
            console.log('DOM元素数量:', document.querySelectorAll('*').length);
            console.log('jQuery版本:', $.fn.jquery);
            console.log('Bootstrap模态框数量:', $('.modal').length);
            console.log('内存使用:', performance.memory ? performance.memory : '不支持');
        };

        // 全局调试开关
        window.enableDebugMode = function() {
            i18n.debug = true;
            console.log('=== 调试模式已开启 ===');
            console.log('可用调试功能:');
            console.log('  debugModuleForm() - 检查表单状态');
            console.log('  debugRequestFlow(testData) - 模拟请求流程');
            console.log('  debugI18n() - 国际化调试');
            console.log('  debugVersionParsing(response) - 版本解析测试');
            console.log('  debugPerformance() - 性能调试');
            console.log('  disableDebugMode() - 关闭调试模式');
        };

        window.disableDebugMode = function() {
            i18n.debug = false;
            console.log('调试模式已关闭');
        };
        
        // 按钮状态管理函数
        function setButtonLoading($btn, loading, operation) {
            if (loading) {
                var loadingText = '';
                switch(operation) {
                    case 'reloading':
                        loadingText = '<i class="fa fa-spinner fa-spin"></i> ' + i18n.get('button.reloading');
                        break;
                    case 'checking':
                        loadingText = '<i class="fa fa-spinner fa-spin"></i> ' + i18n.get('button.checking');
                        break;
                    default:
                        loadingText = '<i class="fa fa-spinner fa-spin"></i> 处理中...';
                }
                
                $btn.prop('disabled', true)
                    .data('original-html', $btn.html())
                    .html(loadingText)
                    .addClass('btn-loading');
            } else {
                $btn.prop('disabled', false)
                    .html($btn.data('original-html') || $btn.html())
                    .removeClass('btn-loading');
            }
        }

        function showOperationProgress($row, operation) {
            var operationText = '';
            switch(operation) {
                case 'reload':
                    operationText = i18n.get('operation.reloading');
                    break;
                case 'checking':
                    operationText = i18n.get('operation.checking.status');
                    break;
                default:
                    operationText = '处理中...';
            }
            
            var progressHtml = '<div class="operation-progress">' +
                '<div class="progress" style="height: 4px;">' +
                '<div class="progress-bar progress-bar-striped progress-bar-animated bg-info" style="width: 100%"></div>' +
                '</div>' +
                '<small class="text-muted">' + operationText + '</small>' +
                '</div>';
            $row.find('.operation-status').html(progressHtml);
        }

        function hideOperationProgress($row) {
            $row.find('.operation-status').empty();
        }

        function updateModuleStatus($row, status) {
            var $indicators = $row.find('.status-indicators');
            var statusHtml = '';
            
            switch(status) {
                case 'reload-success':
                    statusHtml = '<i class="fa fa-circle text-success" title="最近reload成功"></i>' +
                        '<span class="badge badge-success">' + i18n.get('operation.reload.success') + '</span>';
                    break;
                case 'reload-failed':
                    statusHtml = '<i class="fa fa-circle text-danger" title="reload失败"></i>' +
                        '<span class="badge badge-danger">' + i18n.get('operation.reload.failed') + '</span>';
                    break;
                case 'checking':
                    statusHtml = '<i class="fa fa-circle text-warning" title="检测中"></i>' +
                        '<span class="badge badge-warning">' + i18n.get('status.checking') + '</span>';
                    break;
                default:
                    statusHtml = '<i class="fa fa-circle text-muted" title="未检测"></i>' +
                        '<span class="badge badge-secondary">待检测</span>';
            }
            
            $indicators.html(statusHtml);
        }

        function verifyModuleStatus(appName, ip, $row) {
            updateModuleStatus($row, 'checking');
            
            $.get("/module/status.json", {appName: appName, ip: ip})
                .done(function(response) {
                    if (response.success) {
                        updateModuleStatusDisplay($row, response.data);
                    } else {
                        updateModuleStatus($row, 'reload-failed');
                    }
                })
                .fail(function() {
                    updateModuleStatus($row, 'reload-failed');
                });
        }

        function updateModuleStatusDisplay($row, statusData) {
            var statusHtml = '';
            
            // 连接状态指示灯
            if (statusData.online) {
                var colorClass = statusData.responseTime < 1000 ? 'text-success' : 
                                statusData.responseTime < 3000 ? 'text-warning' : 'text-danger';
                statusHtml += '<i class="fa fa-circle ' + colorClass + '" title="' + 
                    i18n.get('status.online') + ' (' + statusData.responseTime + 'ms)"></i> ';
            } else {
                statusHtml += '<i class="fa fa-circle text-muted" title="' + i18n.get('status.offline') + '"></i> ';
            }
            
            // 模块状态
            if (statusData.moduleActive) {
                statusHtml += '<span class="badge badge-success">' + i18n.get('status.active') + '</span>';
            } else {
                statusHtml += '<span class="badge badge-danger">' + i18n.get('status.inactive') + '</span>';
            }
            
            // 响应时间
            if (statusData.responseTime) {
                statusHtml += ' <small class="text-muted">' + statusData.responseTime + 'ms</small>';
            }
            
            $row.find('.status-indicators').html(statusHtml);
        }

        function showSuccess(message, detail) {
            if (detail) {
                $("#success-message-area").html('<strong>' + message + '</strong><br>' +
                    '<small class="text-muted">' + detail + '</small>');
            } else {
                $("#success-message-area").html(message);
            }
            $("#success-modal").modal('show');
        }

        function showError(title, message, detail) {
            var errorContent = '<strong>' + title + '</strong><br>' + message;
            if (detail) {
                errorContent += '<br><br><div class="error-detail-content">' + detail + '</div>';
            }
            $("#danger-message-area").html(errorContent);
            $("#danger-modal").modal('show');
        }
        
        // 实时状态监控功能
        var statusMonitorInterval;
        var isMonitoringEnabled = true;
        
        function startStatusMonitoring() {
            if (!isMonitoringEnabled) return;
            
            // 立即检测一次
            checkAllModuleStatus();
            
            // 每30秒自动检测
            statusMonitorInterval = setInterval(function() {
                if (isMonitoringEnabled &amp;&amp; $('.module-row').length > 0) {
                    checkAllModuleStatus();
                }
            }, 30000);
            
            console.log('[STATUS] 模块状态监控已启动，每30秒自动检测');
        }
        
        function stopStatusMonitoring() {
            isMonitoringEnabled = false;
            if (statusMonitorInterval) {
                clearInterval(statusMonitorInterval);
                statusMonitorInterval = null;
            }
            console.log('[STOP] 模块状态监控已停止');
        }
        
        function checkAllModuleStatus() {
            console.log('[CHECK] 开始检测所有模块状态...');
            var $rows = $('.module-row');
            
            if ($rows.length === 0) {
                console.log('[INFO] 没有发现模块，跳过检测');
                return;
            }
            
            $rows.each(function(index) {
                var $row = $(this);
                var appName = $row.data('app');
                var ip = $row.data('ip');
                
                if (!appName || !ip) {
                    console.warn('[WARN] 模块信息不完整，跳过:', $row.get(0));
                    return;
                }
                
                // 延迟检测，避免同时发起太多请求
                setTimeout(function() {
                    checkSingleModuleStatus(appName, ip, $row);
                }, index * 200);
            });
        }
        
        function checkSingleModuleStatus(appName, ip, $row) {
            // 标记正在检测
            var $indicators = $row.find('.status-indicators');
            $indicators.find('.fa-circle').removeClass('text-success text-warning text-danger text-muted')
                      .addClass('text-info')
                      .attr('title', '检测中...');
            
            $.get("/module/status.json", {appName: appName, ip: ip})
                .done(function(response) {
                    if (response.success) {
                        updateModuleStatusDisplay($row, response.data);
                        updateHeartbeatTime($row, response.data.lastHeartbeat);
                        
                        // 记录检测结果
                        var status = response.data.online ? '在线' : '离线';
                        var moduleStatus = response.data.moduleActive ? '运行中' : '异常';
                        console.log('[OK] ' + appName + '@' + ip + ': ' + status + ', ' + moduleStatus + ', ' + response.data.responseTime + 'ms');
                    } else {
                        updateModuleStatusOffline($row, response.message);
                        console.log('[ERROR] ' + appName + '@' + ip + ': 检测失败 - ' + response.message);
                    }
                })
                .fail(function(xhr, status, error) {
                    updateModuleStatusOffline($row, '网络错误: ' + error);
                    console.log('[NET] ' + appName + '@' + ip + ': 网络异常 - ' + error);
                });
        }
        
        function updateModuleStatusOffline($row, error) {
            var statusHtml = '<i class="fa fa-circle text-danger" title="连接失败: ' + error + '"></i>' +
                '<span class="badge badge-danger">' + i18n.get('status.offline') + '</span>';
            $row.find('.status-indicators').html(statusHtml);
        }
        
        function updateHeartbeatTime($row, lastHeartbeat) {
            if (lastHeartbeat) {
                var heartbeatCell = $row.find('td').eq(7); // 心跳时间列
                heartbeatCell.text(lastHeartbeat);
            }
        }
        
        // 手动刷新所有状态
        function refreshAllStatus() {
            checkAllModuleStatus();
            notice('正在刷新所有模块状态...', true);
        }
        
        // 切换监控开关
        function toggleStatusMonitoring() {
            if (isMonitoringEnabled) {
                stopStatusMonitoring();
                return false;
            } else {
                isMonitoringEnabled = true;
                startStatusMonitoring();
                return true;
            }
        }
        
        // 导出调试函数到全局
        window.moduleStatusMonitor = {
            start: startStatusMonitoring,
            stop: stopStatusMonitoring,
            toggle: toggleStatusMonitoring,
            refresh: refreshAllStatus,
            checkAll: checkAllModuleStatus,
            isEnabled: function() { return isMonitoringEnabled; }
        };
        
        // 监控按钮控制函数
        window.toggleMonitorButton = function() {
            var enabled = toggleStatusMonitoring();
            var $btn = $('#btn-toggle-monitor');
            var $text = $('#monitor-status-text');
            var $icon = $btn.find('i');
            
            if (enabled) {
                $btn.removeClass('btn-secondary').addClass('btn-success');
                $icon.removeClass('fa-play').addClass('fa-pause');
                $text.text('监控中');
                $btn.attr('title', '点击暂停自动状态监控');
            } else {
                $btn.removeClass('btn-success').addClass('btn-secondary');
                $icon.removeClass('fa-pause').addClass('fa-play');
                $text.text('已暂停');
                $btn.attr('title', '点击启动自动状态监控');
            }
            
            notice(enabled ? '状态监控已启动' : '状态监控已暂停', true);
        };
        
        // 刷新状态按钮控制函数  
        window.refreshAllStatus = function() {
            var $btn = $('#btn-refresh-status');
            var $icon = $btn.find('i');
            
            // 设置按钮为加载状态
            $btn.prop('disabled', true);
            $icon.addClass('fa-spin');
            
            checkAllModuleStatus();
            
            // 2秒后恢复按钮状态
            setTimeout(function() {
                $btn.prop('disabled', false);
                $icon.removeClass('fa-spin');
                notice('模块状态已刷新', true);
            }, 2000);
        };
        
        // 页面加载完成后启动监控
        setTimeout(function() {
            console.log('🚀 页面加载完成，启动模块状态监控...');
            startStatusMonitoring();
        }, 1000);
        
        // 页面离开时停止监控
        $(window).on('beforeunload', function() {
            stopStatusMonitoring();
        });
        
        // 页面隐藏/显示时控制监控
        document.addEventListener('visibilitychange', function() {
            if (document.hidden) {
                console.log('📱 页面已隐藏，暂停状态监控');
                if (statusMonitorInterval) {
                    clearInterval(statusMonitorInterval);
                }
            } else {
                console.log('👀 页面已显示，恢复状态监控');
                if (isMonitoringEnabled) {
                    startStatusMonitoring();
                }
            }
        });
        
    });
</script>
</body>
</html>